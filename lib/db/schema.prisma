generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          String?         @default("Security Analyst")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  password      String?
  accounts      Account[]
  assets        Asset[]
  Authenticator Authenticator[]
  sessions      Session[]
  vulnReports   VulnReport[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Asset {
  id              String   @id @default(cuid())
  assetName       String
  assetType       String
  manufacturer    String
  model           String
  serialNumber    String
  firmwareVersion String
  ipAddress       String
  location        String
  criticality     String
  networkSegment  String
  lastScannedDate DateTime
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VulnReport {
  id               String   @id @default(cuid())
  cveId            String
  cweId            String?
  cveName          String
  cvssVersion      String
  cvssScore        Float
  originalSeverity String   @default("Unknown")
  newSeverity      String   @default("Unknown")
  description      String   @db.Text
  ipAddress        String?
  device           String?
  status           String   @default("Open")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([cveId, userId])
  @@index([userId])
}
