'use client';

import { Button } from "@/components/ui/button";
import Link from "next/link";
import { MoreHorizontal, ArrowUpDown } from "lucide-react";
import { VulnerabilityAnalysis } from '@prisma/client';
import { useState, useEffect } from "react";
import { StatusSelect } from "./status-select";

// Helper function for badge colors based on severity/risk
const getBadgeClass = (level: string | undefined | null): string => {
  const lowerLevel = level?.toLowerCase() || '';
  if (lowerLevel.includes('critical')) return 'bg-red-100 text-red-800';
  if (lowerLevel.includes('high')) return 'bg-orange-100 text-orange-800';
  if (lowerLevel.includes('medium')) return 'bg-yellow-100 text-yellow-800';
  if (lowerLevel.includes('low')) return 'bg-blue-100 text-blue-800';
  return 'bg-gray-100 text-gray-800'; // Default/Unknown
};

export function VulnerabilityTable({ initialVulnerabilities }: { initialVulnerabilities: VulnerabilityAnalysis[] }) {
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityAnalysis[]>(initialVulnerabilities);
  const [sortField, setSortField] = useState<keyof VulnerabilityAnalysis | null>(null);
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');

  const handleSort = (field: keyof VulnerabilityAnalysis) => {
    const isAsc = sortField === field && sortDirection === 'asc';
    setSortDirection(isAsc ? 'desc' : 'asc');
    setSortField(field);
    
    // Sort the vulnerabilities
    const sortedData = [...vulnerabilities].sort((a, b) => {
      const valueA = a[field] || '';
      const valueB = b[field] || '';
      
      // Compare strings
      if (typeof valueA === 'string' && typeof valueB === 'string') {
        return isAsc 
          ? valueB.localeCompare(valueA) 
          : valueA.localeCompare(valueB);
      }
      
      // Compare numbers or other types
      return isAsc 
        ? (valueB > valueA ? 1 : -1) 
        : (valueA > valueB ? 1 : -1);
    });
    
    setVulnerabilities(sortedData);
  };

  // Render sort indicator
  const renderSortIcon = (field: keyof VulnerabilityAnalysis) => {
    return (
      <Button 
        variant="ghost" 
        size="sm" 
        onClick={() => handleSort(field)} 
        className="ml-1 p-0 h-6 w-6"
      >
        <ArrowUpDown className={`h-4 w-4 ${sortField === field ? 'text-black' : 'text-gray-400'}`} />
      </Button>
    );
  };

  return (
    <div className="bg-white rounded-lg shadow">
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gray-50 text-xs uppercase text-gray-500">
            <tr>
              <th className="px-6 py-3 text-left">
                <div className="flex items-center">
                  CVE ID
                  {renderSortIcon('cveId')}
                </div>
              </th>
              <th className="px-6 py-3 text-left">
                <div className="flex items-center">
                  CVE Name
                  {renderSortIcon('cveName')}
                </div>
              </th>
              <th className="px-6 py-3 text-left">
                <div className="flex items-center">
                  Asset Name
                  {renderSortIcon('assetName')}
                </div>
              </th>
              <th className="px-6 py-3 text-left">
                <div className="flex items-center">
                  IP Address
                  {renderSortIcon('ipAddress')}
                </div>
              </th>
              <th className="px-6 py-3 text-left">
                <div className="flex items-center">
                  Original Severity
                  {renderSortIcon('vulnerabilitySeverity')}
                </div>
              </th>
              <th className="px-6 py-3 text-left">
                <div className="flex items-center">
                  New Severity
                  {renderSortIcon('riskLevel')}
                </div>
              </th>
              <th className="px-6 py-3 text-left">
                <div className="flex items-center">
                  Status
                  {renderSortIcon('status')}
                </div>
              </th>
              <th className="px-6 py-3 text-left">Actions</th>
            </tr>
          </thead>
          <tbody className="divide-y">
            {vulnerabilities.length === 0 ? (
              <tr>
                <td colSpan={8} className="px-6 py-4 text-center text-sm text-gray-500">
                  No vulnerability data found.
                </td>
              </tr>
            ) : (
              vulnerabilities.map((vuln) => (
                <tr key={vuln.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">{vuln.cveId}</td>
                  <td className="px-6 py-4 text-sm text-gray-600 truncate max-w-xs" title={vuln.cveName}>{vuln.cveName}</td>
                  <td className="px-6 py-4 text-sm text-gray-600">{vuln.assetName}</td>
                  <td className="px-6 py-4 text-sm text-gray-600">{vuln.ipAddress}</td>
                  <td className="px-6 py-4 text-sm">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getBadgeClass(vuln.vulnerabilitySeverity)}`}>
                      {vuln.vulnerabilitySeverity}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getBadgeClass(vuln.riskLevel)}`}>
                      {vuln.riskLevel}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm">
                    <StatusSelect id={vuln.id} initialStatus={vuln.status || 'Open'} />
                  </td>
                  <td className="px-6 py-4 text-sm">
                    <Link href={`/details/${vuln.id}`}>
                      <Button variant="ghost" size="icon" className="text-gray-400">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </Link>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
  