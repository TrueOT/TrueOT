import { Button } from "@/components/ui/button";
import Link from "next/link";
import { MoreHorizontal } from "lucide-react";
import { VulnerabilityAnalysis } from '@prisma/client';
import { prisma } from "../../../lib/db/prisma";
import { StatusSelect } from "./status-select";

async function getVulnerabilityData(): Promise<VulnerabilityAnalysis[]> {
  try {
    // Fetch vulnerabilities directly from the database
    return await prisma.vulnerabilityAnalysis.findMany();
  } catch (error) {
    console.error('Error fetching vulnerability data:', error);
    return [];
  }
}

// Remove the static vulnerabilities array
// const vulnerabilities = [...];

export async function VulnerabilityTable() {
  const vulnerabilities = await getVulnerabilityData();

  // Helper function for badge colors based on severity/risk
  const getBadgeClass = (level: string | undefined | null): string => {
    const lowerLevel = level?.toLowerCase() || '';
    if (lowerLevel.includes('critical')) return 'bg-red-100 text-red-800';
    if (lowerLevel.includes('high')) return 'bg-orange-100 text-orange-800';
    if (lowerLevel.includes('medium')) return 'bg-yellow-100 text-yellow-800';
    if (lowerLevel.includes('low')) return 'bg-blue-100 text-blue-800';
    return 'bg-gray-100 text-gray-800'; // Default/Unknown
  };

  // Helper function for status badge colors - we moved this to the client component
  // so we don't need it here anymore

  return (
    <div className="bg-white rounded-lg shadow">
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gray-50 text-xs uppercase text-gray-500">
            <tr>
              <th className="px-6 py-3 text-left">CVE ID</th>
              <th className="px-6 py-3 text-left">CVE Name</th>
              <th className="px-6 py-3 text-left">Asset Name</th>
              <th className="px-6 py-3 text-left">IP Address</th>
              <th className="px-6 py-3 text-left">Original Severity</th>
              <th className="px-6 py-3 text-left">New Severity</th>
              <th className="px-6 py-3 text-left">Status</th>
              <th className="px-6 py-3 text-left">Actions</th>
            </tr>
          </thead>
          <tbody className="divide-y">
            {vulnerabilities.length === 0 ? (
              <tr>
                <td colSpan={8} className="px-6 py-4 text-center text-sm text-gray-500">
                  No vulnerability data found.
                </td>
              </tr>
            ) : (
              vulnerabilities.map((vuln) => (
                <tr key={vuln.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">{vuln.cveId}</td>
                  <td className="px-6 py-4 text-sm text-gray-600 truncate max-w-xs" title={vuln.cveName}>{vuln.cveName}</td>
                  <td className="px-6 py-4 text-sm text-gray-600">{vuln.assetName}</td>
                  <td className="px-6 py-4 text-sm text-gray-600">{vuln.ipAddress}</td>
                  <td className="px-6 py-4 text-sm">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getBadgeClass(vuln.vulnerabilitySeverity)}`}>
                      {vuln.vulnerabilitySeverity}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getBadgeClass(vuln.riskLevel)}`}>
                      {vuln.riskLevel}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm">
                    <StatusSelect id={vuln.id} initialStatus={vuln.status || 'Open'} />
                  </td>
                  <td className="px-6 py-4 text-sm">
                    <Link href={`/details/${vuln.id}`}>
                      <Button variant="ghost" size="icon" className="text-gray-400">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </Link>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
  