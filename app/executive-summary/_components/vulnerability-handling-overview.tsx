"use client";

import { useEffect, useState } from 'react';

export function VulnerabilityHandlingOverview() {
  const [data, setData] = useState({
    vulnerabilitiesUploaded: 0,
    incidentsResolved: 0,
    riskScore: 0
  });
  
  useEffect(() => {
    async function fetchOverviewData() {
      try {
        const response = await fetch('/api/vulnerabilities/overview');
        if (!response.ok) {
          throw new Error('Failed to fetch vulnerability overview');
        }
        
        const overviewData = await response.json();
        setData(overviewData);
      } catch (error) {
        console.error('Error fetching vulnerability overview:', error);
      }
    }
    
    fetchOverviewData();
  }, []);

  // Calculate arc path based on risk score
  const calculateArcPath = (score: number) => {
    const radius = 80;
    const centerX = 100;
    const centerY = 100;
    
    // Convert score to percentage (0-10 scale)
    const percentage = score / 10;
    
    // Convert percentage to angle (0-180 degrees)
    const angle = percentage * 180;
    
    // Convert angle to radians
    const angleRad = (angle * Math.PI) / 180;
    
    // Calculate end point
    const endX = centerX + radius * Math.sin(angleRad);
    const endY = centerY - radius * Math.cos(angleRad);
    
    // Create arc path
    const largeArcFlag = angle > 90 ? 1 : 0;
    return `M ${centerX - radius} ${centerY} A ${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY}`;
  };

  return (
    <div>
      <h2 className="text-base font-medium mb-6">Vulnerability Handling Overview</h2>
      
      <div className="flex flex-col gap-4">
        <div className="bg-slate-100 p-4 rounded-lg">
          <h3 className="text-xs text-gray-500 mb-1">Vulnerabilities Uploaded</h3>
          <p className="text-xl font-bold">{data.vulnerabilitiesUploaded} vulnerabilities</p>
        </div>
        
        <div className="bg-slate-100 p-4 rounded-lg">
          <h3 className="text-xs text-gray-500 mb-1">Incidents Resolved</h3>
          <p className="text-xl font-bold">{data.incidentsResolved} resolved</p>
        </div>
      </div>
      
      <div className="mt-6 relative">
        <svg width="200" height="120" viewBox="0 0 200 120">
          {/* Background arc */}
          <path
            d="M 20 100 A 80 80 0 0 1 180 100"
            fill="none"
            stroke="#e6e6e6"
            strokeWidth="10"
            strokeLinecap="round"
          />
          
          {/* Progress arc */}
          <path
            d={calculateArcPath(data.riskScore)}
            fill="none"
            stroke="#8E3A59"
            strokeWidth="10"
            strokeLinecap="round"
          />
          
          {/* Risk score text */}
          <text x="100" y="50" textAnchor="middle" fontSize="40" fontWeight="bold">
            {data.riskScore.toFixed(1)}
          </text>
          
          <text x="100" y="70" textAnchor="middle" fontSize="12" fill="#666">
            Total Score
          </text>
          
          {/* Risk label */}
          <text x="160" y="50" textAnchor="middle" fontSize="12" fill="#666">
            Risk
          </text>
        </svg>
      </div>
    </div>
  );
} 